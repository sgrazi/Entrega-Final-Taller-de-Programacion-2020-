
package publicar;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import net.java.dev.jaxb.array.StringArray;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WebServices", targetNamespace = "http://publicar/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    publicar.ObjectFactory.class,
    net.java.dev.jaxb.array.ObjectFactory.class
})
public interface WebServices {


    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtPaquete
     * @throws PaqueteNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerPaqueteRequest", output = "http://publicar/WebServices/obtenerPaqueteResponse", fault = {
        @FaultAction(className = PaqueteNoExisteException_Exception.class, value = "http://publicar/WebServices/obtenerPaquete/Fault/PaqueteNoExisteException")
    })
    public DtPaquete obtenerPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws PaqueteNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns net.java.dev.jaxb.array.StringArray
     * @throws PaqueteNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/listarPaquetesRequest", output = "http://publicar/WebServices/listarPaquetesResponse", fault = {
        @FaultAction(className = PaqueteNoExisteException_Exception.class, value = "http://publicar/WebServices/listarPaquetes/Fault/PaqueteNoExisteException")
    })
    public StringArray listarPaquetes()
        throws PaqueteNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns publicar.ColDtFuncion
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getFuncionesRequest", output = "http://publicar/WebServices/getFuncionesResponse")
    public ColDtFuncion getFunciones();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws EspectaculoNoExistenteException_Exception
     * @throws NombreFuncionRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/confirmarAltaFuncionRequest", output = "http://publicar/WebServices/confirmarAltaFuncionResponse", fault = {
        @FaultAction(className = NombreFuncionRepetidoException_Exception.class, value = "http://publicar/WebServices/confirmarAltaFuncion/Fault/NombreFuncionRepetidoException"),
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/confirmarAltaFuncion/Fault/EspectaculoNoExistenteException")
    })
    public void confirmarAltaFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        DtHora arg3,
        @WebParam(name = "arg4", partName = "arg4")
        SetString arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5)
        throws EspectaculoNoExistenteException_Exception, NombreFuncionRepetidoException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg6
     * @throws EspectaculoNoExistenteException_Exception
     * @throws CanjeInvalidoException_Exception
     * @throws EspectadorYaRegistradoException_Exception
     * @throws TicketsAgotadosParaFuncionException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/confirmarAltaRegistroAFuncionRequest", output = "http://publicar/WebServices/confirmarAltaRegistroAFuncionResponse", fault = {
        @FaultAction(className = EspectadorYaRegistradoException_Exception.class, value = "http://publicar/WebServices/confirmarAltaRegistroAFuncion/Fault/EspectadorYaRegistradoException"),
        @FaultAction(className = TicketsAgotadosParaFuncionException_Exception.class, value = "http://publicar/WebServices/confirmarAltaRegistroAFuncion/Fault/TicketsAgotadosParaFuncionException"),
        @FaultAction(className = CanjeInvalidoException_Exception.class, value = "http://publicar/WebServices/confirmarAltaRegistroAFuncion/Fault/CanjeInvalidoException"),
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/confirmarAltaRegistroAFuncion/Fault/EspectaculoNoExistenteException")
    })
    public void confirmarAltaRegistroAFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        boolean arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6)
        throws CanjeInvalidoException_Exception, EspectaculoNoExistenteException_Exception, EspectadorYaRegistradoException_Exception, TicketsAgotadosParaFuncionException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/comprarPaqueteRequest", output = "http://publicar/WebServices/comprarPaqueteResponse")
    public void comprarPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg0
     * @throws EspectaculoAgregadoYaExisteExcepcion_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/altaEspectaculoRequest", output = "http://publicar/WebServices/altaEspectaculoResponse", fault = {
        @FaultAction(className = EspectaculoAgregadoYaExisteExcepcion_Exception.class, value = "http://publicar/WebServices/altaEspectaculo/Fault/EspectaculoAgregadoYaExisteExcepcion"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/altaEspectaculo/Fault/UsuarioNoExisteException"),
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://publicar/WebServices/altaEspectaculo/Fault/PlataformaNoExisteException")
    })
    public void altaEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        DtEspectaculo arg0)
        throws EspectaculoAgregadoYaExisteExcepcion_Exception, PlataformaNoExisteException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws PaqueteRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/altaPaqueteRequest", output = "http://publicar/WebServices/altaPaqueteResponse", fault = {
        @FaultAction(className = PaqueteRepetidoException_Exception.class, value = "http://publicar/WebServices/altaPaquete/Fault/PaqueteRepetidoException")
    })
    public void altaPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        DtPaquete arg0)
        throws PaqueteRepetidoException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws EspectaculoNoExistenteException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws PuntajeInvalidoException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/valorarEspectaculoRequest", output = "http://publicar/WebServices/valorarEspectaculoResponse", fault = {
        @FaultAction(className = PuntajeInvalidoException_Exception.class, value = "http://publicar/WebServices/valorarEspectaculo/Fault/PuntajeInvalidoException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/valorarEspectaculo/Fault/UsuarioNoExisteException"),
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/valorarEspectaculo/Fault/EspectaculoNoExistenteException")
    })
    public void valorarEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2)
        throws EspectaculoNoExistenteException_Exception, PuntajeInvalidoException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EspectaculoNoExistenteException_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/finalizarEspectaculoRequest", output = "http://publicar/WebServices/finalizarEspectaculoResponse", fault = {
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/finalizarEspectaculo/Fault/EspectaculoNoExistenteException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/finalizarEspectaculo/Fault/UsuarioNoExisteException")
    })
    public void finalizarEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExistenteException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns publicar.DtColCategorias
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerCategoriasRequest", output = "http://publicar/WebServices/obtenerCategoriasResponse")
    public DtColCategorias obtenerCategorias();

    /**
     * 
     * @return
     *     returns publicar.ColDtEspectaculos
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerEspectaculosRequest", output = "http://publicar/WebServices/obtenerEspectaculosResponse")
    public ColDtEspectaculos obtenerEspectaculos();

    /**
     * 
     * @return
     *     returns publicar.ColDtUsuarios
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerUsuariosRequest", output = "http://publicar/WebServices/obtenerUsuariosResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/obtenerUsuarios/Fault/UsuarioNoExisteException")
    })
    public ColDtUsuarios obtenerUsuarios()
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.SetString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getRegistrosNoCanjeadosUsuarioRequest", output = "http://publicar/WebServices/getRegistrosNoCanjeadosUsuarioResponse")
    public SetString getRegistrosNoCanjeadosUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EspectaculoNoExistenteException_Exception
     * @throws PaqueteNoExisteException_Exception
     * @throws EspectaculoEnPaqueteErrorException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/agregarEspectaculoAPaqueteRequest", output = "http://publicar/WebServices/agregarEspectaculoAPaqueteResponse", fault = {
        @FaultAction(className = EspectaculoEnPaqueteErrorException_Exception.class, value = "http://publicar/WebServices/agregarEspectaculoAPaquete/Fault/EspectaculoEnPaqueteErrorException"),
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/agregarEspectaculoAPaquete/Fault/EspectaculoNoExistenteException"),
        @FaultAction(className = PaqueteNoExisteException_Exception.class, value = "http://publicar/WebServices/agregarEspectaculoAPaquete/Fault/PaqueteNoExisteException")
    })
    public void agregarEspectaculoAPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoEnPaqueteErrorException_Exception, EspectaculoNoExistenteException_Exception, PaqueteNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/accederRegistrosAdminRequest", output = "http://publicar/WebServices/accederRegistrosAdminResponse")
    public boolean accederRegistrosAdmin(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns publicar.ColDtEspectaculos
     * @throws EspectaculoNoExistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/espectaculosParaPaqueteEnPlataformaRequest", output = "http://publicar/WebServices/espectaculosParaPaqueteEnPlataformaResponse", fault = {
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/espectaculosParaPaqueteEnPlataforma/Fault/EspectaculoNoExistenteException")
    })
    public ColDtEspectaculos espectaculosParaPaqueteEnPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ListString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/sortearPremiosRequest", output = "http://publicar/WebServices/sortearPremiosResponse")
    public ListString sortearPremios(
        @WebParam(name = "arg0", partName = "arg0")
        DtFuncion arg0);

    /**
     * 
     * @return
     *     returns net.java.dev.jaxb.array.StringArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/listarPlataformasRequest", output = "http://publicar/WebServices/listarPlataformasResponse")
    public StringArray listarPlataformas();

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtPlataforma
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerPlataformaRequest", output = "http://publicar/WebServices/obtenerPlataformaResponse")
    public DtPlataforma obtenerPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/dejarDeSeguirAUnUsuarioWSRequest", output = "http://publicar/WebServices/dejarDeSeguirAUnUsuarioWSResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/dejarDeSeguirAUnUsuarioWS/Fault/UsuarioNoExisteException")
    })
    public void dejarDeSeguirAUnUsuarioWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtUsuario
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getDtUsuarioPorNickNameRequest", output = "http://publicar/WebServices/getDtUsuarioPorNickNameResponse")
    public DtUsuario getDtUsuarioPorNickName(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/seguirAUnUsuarioWSRequest", output = "http://publicar/WebServices/seguirAUnUsuarioWSResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/seguirAUnUsuarioWS/Fault/UsuarioNoExisteException")
    })
    public void seguirAUnUsuarioWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/setearDatosArtistaModificadosWSRequest", output = "http://publicar/WebServices/setearDatosArtistaModificadosWSResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/setearDatosArtistaModificadosWS/Fault/UsuarioNoExisteException")
    })
    public void setearDatosArtistaModificadosWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns publicar.DtColPlataformas
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerPlataformasRequest", output = "http://publicar/WebServices/obtenerPlataformasResponse")
    public DtColPlataformas obtenerPlataformas();

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.SetString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getArtistasInvitadosMenosRequest", output = "http://publicar/WebServices/getArtistasInvitadosMenosResponse")
    public SetString getArtistasInvitadosMenos(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtUsuario
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerUsuarioPorNickNameWSRequest", output = "http://publicar/WebServices/obtenerUsuarioPorNickNameWSResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/obtenerUsuarioPorNickNameWS/Fault/UsuarioNoExisteException")
    })
    public DtUsuario obtenerUsuarioPorNickNameWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ArrayString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getEspectaculosAceptadosArtistaRequest", output = "http://publicar/WebServices/getEspectaculosAceptadosArtistaResponse")
    public ArrayString getEspectaculosAceptadosArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ListString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getArtistasFuncionRequest", output = "http://publicar/WebServices/getArtistasFuncionResponse")
    public ListString getArtistasFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/setearDatosBasicosModificadosWSRequest", output = "http://publicar/WebServices/setearDatosBasicosModificadosWSResponse")
    public void setearDatosBasicosModificadosWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/setearContrasenaNuevaWSRequest", output = "http://publicar/WebServices/setearContrasenaNuevaWSResponse")
    public void setearContrasenaNuevaWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtEspectaculo
     * @throws EspectaculoNoExistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerEspectaculoRequest", output = "http://publicar/WebServices/obtenerEspectaculoResponse", fault = {
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/obtenerEspectaculo/Fault/EspectaculoNoExistenteException")
    })
    public DtEspectaculo obtenerEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EspectaculoNoExistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ColDtsPerfil
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerColsPerfilWSRequest", output = "http://publicar/WebServices/obtenerColsPerfilWSResponse")
    public ColDtsPerfil obtenerColsPerfilWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ColDtEspectaculos
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerEspectaculosBusquedaRequest", output = "http://publicar/WebServices/obtenerEspectaculosBusquedaResponse")
    public ColDtEspectaculos obtenerEspectaculosBusqueda(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ColDtEspectaculos
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerEspectaculosPorCategoriaRequest", output = "http://publicar/WebServices/obtenerEspectaculosPorCategoriaResponse")
    public ColDtEspectaculos obtenerEspectaculosPorCategoria(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EspectaculoNoExistenteException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws UsuarioNoEsEspectadorException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/desmarcarComoFavoritoRequest", output = "http://publicar/WebServices/desmarcarComoFavoritoResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/desmarcarComoFavorito/Fault/UsuarioNoExisteException"),
        @FaultAction(className = UsuarioNoEsEspectadorException_Exception.class, value = "http://publicar/WebServices/desmarcarComoFavorito/Fault/UsuarioNoEsEspectadorException"),
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/desmarcarComoFavorito/Fault/EspectaculoNoExistenteException")
    })
    public void desmarcarComoFavorito(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExistenteException_Exception, UsuarioNoEsEspectadorException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EspectaculoNoExistenteException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws UsuarioNoEsEspectadorException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/marcarComoFavoritoRequest", output = "http://publicar/WebServices/marcarComoFavoritoResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/marcarComoFavorito/Fault/UsuarioNoExisteException"),
        @FaultAction(className = UsuarioNoEsEspectadorException_Exception.class, value = "http://publicar/WebServices/marcarComoFavorito/Fault/UsuarioNoEsEspectadorException"),
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/marcarComoFavorito/Fault/EspectaculoNoExistenteException")
    })
    public void marcarComoFavorito(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExistenteException_Exception, UsuarioNoEsEspectadorException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.ColDtPaquete
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerPaquetesBusquedaRequest", output = "http://publicar/WebServices/obtenerPaquetesBusquedaResponse")
    public ColDtPaquete obtenerPaquetesBusqueda(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws EspectaculoNoExistenteException_Exception
     * @throws UsuarioNoEsEspectadorException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/espectaculoEsFavoritoWSRequest", output = "http://publicar/WebServices/espectaculoEsFavoritoWSResponse", fault = {
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/espectaculoEsFavoritoWS/Fault/EspectaculoNoExistenteException"),
        @FaultAction(className = UsuarioNoEsEspectadorException_Exception.class, value = "http://publicar/WebServices/espectaculoEsFavoritoWS/Fault/UsuarioNoEsEspectadorException")
    })
    public boolean espectaculoEsFavoritoWS(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExistenteException_Exception, UsuarioNoEsEspectadorException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtEspectaculo
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getDtEspectaculoRequest", output = "http://publicar/WebServices/getDtEspectaculoResponse")
    public DtEspectaculo getDtEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getAlgoRequest", output = "http://publicar/WebServices/getAlgoResponse")
    public String getAlgo();

    /**
     * 
     * @return
     *     returns publicar.ColDtPaquete
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/obtenerPaquetesRequest", output = "http://publicar/WebServices/obtenerPaquetesResponse")
    public ColDtPaquete obtenerPaquetes();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg10
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @throws UsuarioAgregarDatosInvalidosException_Exception
     * @throws ParseException_Exception
     * @throws UsuarioAgregarYaExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://publicar/WebServices/confirmarAltaWSRequest", output = "http://publicar/WebServices/confirmarAltaWSResponse", fault = {
        @FaultAction(className = UsuarioAgregarDatosInvalidosException_Exception.class, value = "http://publicar/WebServices/confirmarAltaWS/Fault/UsuarioAgregarDatosInvalidosException"),
        @FaultAction(className = UsuarioAgregarYaExisteException_Exception.class, value = "http://publicar/WebServices/confirmarAltaWS/Fault/UsuarioAgregarYaExisteException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://publicar/WebServices/confirmarAltaWS/Fault/ParseException")
    })
    public void confirmarAltaWS(
        @WebParam(name = "arg0", partName = "arg0")
        boolean arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        XMLGregorianCalendar arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8,
        @WebParam(name = "arg9", partName = "arg9")
        String arg9,
        @WebParam(name = "arg10", partName = "arg10")
        String arg10)
        throws ParseException_Exception, UsuarioAgregarDatosInvalidosException_Exception, UsuarioAgregarYaExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns publicar.DtFuncion
     * @throws EspectaculoNoExistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/getDtFuncionRequest", output = "http://publicar/WebServices/getDtFuncionResponse", fault = {
        @FaultAction(className = EspectaculoNoExistenteException_Exception.class, value = "http://publicar/WebServices/getDtFuncion/Fault/EspectaculoNoExistenteException")
    })
    public DtFuncion getDtFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EspectaculoNoExistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns publicar.DtUsuario
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://publicar/WebServices/loginRequest", output = "http://publicar/WebServices/loginResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://publicar/WebServices/login/Fault/UsuarioNoExisteException")
    })
    public DtUsuario login(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws UsuarioNoExisteException_Exception
    ;

}
